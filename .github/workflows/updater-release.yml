# GitHub Releases에서 Tauri 업데이터를 위한 메타데이터 자동 생성
name: Release with Updater Metadata

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v4
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: get version from tag
        run: echo "PACKAGE_VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: create or get release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = `v${process.env.PACKAGE_VERSION}`;

            // Check if release already exists
            try {
              const { data: existingRelease } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tagName,
              });

              console.log(`Release already exists for ${tagName}, using existing release ID: ${existingRelease.id}`);
              return existingRelease.id;
            } catch (error) {
              if (error.status === 404) {
                // Release doesn't exist, create it as DRAFT
                console.log(`Release doesn't exist for ${tagName}, creating new DRAFT release...`);
                const { data } = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tagName,
                  name: `Claude Code History Viewer v${process.env.PACKAGE_VERSION}`,
                  body: '🎉 새로운 버전이 출시되었습니다! 자세한 변경사항은 아래를 확인하세요.',
                  generate_release_notes: true,
                  draft: true,
                  prerelease: false,
                });
                console.log(`Created new DRAFT release with ID: ${data.id}`);
                return data.id;
              }

              // Re-throw if it's not a 404 error
              throw error;
            }

  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            os: macos
          - platform: ubuntu-latest
            os: linux
          - platform: windows-latest
            os: windows

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install Linux dependencies
        if: matrix.os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: install frontend dependencies
        run: pnpm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  generate-updater-metadata:
    needs: [create-release, build-tauri]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 'latest' 대신 ID로 특정 릴리스를 조회하여 Race Condition을 방지하고 안정성을 높입니다.
      - name: Get specific release info by ID
        id: release
        run: |
          echo "📡 Fetching release information for ID: ${{ needs.create-release.outputs.release_id }}"

          RELEASE_INFO=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ needs.create-release.outputs.release_id }}")

          # curl 호출이 실패했거나 유효한 JSON이 아닌 경우 워크플로우를 중단시킵니다.
          if ! echo "$RELEASE_INFO" | jq . > /dev/null 2>&1; then
            echo "::error::Failed to fetch or parse release information from GitHub API."
            echo "Response was: $RELEASE_INFO"
            exit 1
          fi

          echo "✅ Successfully fetched release information"
          echo "🏷️ Release tag: $(echo "$RELEASE_INFO" | jq -r '.tag_name')"

          # 셸 인용 문제를 피하기 위해 heredoc 문법으로 안전하게 출력을 설정합니다.
          echo "release_info<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate latest.json for Tauri updater
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // GitHub API로 안전하게 릴리스 정보 가져오기
            const release = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }}
            });

            const releaseData = release.data;
            const version = releaseData.tag_name.replace(/^v/, '');
            const pubDate = releaseData.published_at;

            console.log(`Processing release version: ${version}`);
            console.log(`Publish date: ${pubDate}`);

            // 플랫폼별 에셋 찾기
            const platforms = {};

            // macOS (darwin-universal)
            const dmgAsset = releaseData.assets.find(asset =>
              asset?.name?.includes('.dmg') && !asset.name.includes('.sig')
            );
            const dmgSigAsset = releaseData.assets.find(asset =>
              asset?.name?.includes('.dmg.sig')
            );

            if (dmgAsset) {
              let signature = '';
              if (dmgSigAsset) {
                try {
                  const sigResponse = await fetch(dmgSigAsset.browser_download_url);
                  const sigContent = await sigResponse.text();
                  signature = Buffer.from(sigContent).toString('base64');
                } catch (error) {
                  console.warn('Failed to download macOS signature:', error.message);
                }
              }
              platforms['darwin-universal'] = {
                signature: signature,
                url: dmgAsset.browser_download_url
              };
              console.log(`macOS DMG: ${dmgAsset.browser_download_url}`);
            }

            // Windows (x86_64)
            const msiAsset = releaseData.assets.find(asset =>
              asset?.name?.endsWith('.msi') && !asset.name.includes('.sig')
            );
            const msiSigAsset = releaseData.assets.find(asset =>
              asset?.name?.endsWith('.msi.sig')
            );

            if (msiAsset) {
              let signature = '';
              if (msiSigAsset) {
                try {
                  const sigResponse = await fetch(msiSigAsset.browser_download_url);
                  const sigContent = await sigResponse.text();
                  signature = Buffer.from(sigContent).toString('base64');
                } catch (error) {
                  console.warn('Failed to download Windows signature:', error.message);
                }
              }
              platforms['windows-x86_64'] = {
                signature: signature,
                url: msiAsset.browser_download_url
              };
              console.log(`Windows MSI: ${msiAsset.browser_download_url}`);
            }

            // Linux (x86_64) - AppImage
            const appImageAsset = releaseData.assets.find(asset =>
              asset?.name?.endsWith('.AppImage') && !asset.name.includes('.sig')
            );
            const appImageSigAsset = releaseData.assets.find(asset =>
              asset?.name?.endsWith('.AppImage.sig')
            );

            if (appImageAsset) {
              let signature = '';
              if (appImageSigAsset) {
                try {
                  const sigResponse = await fetch(appImageSigAsset.browser_download_url);
                  const sigContent = await sigResponse.text();
                  signature = Buffer.from(sigContent).toString('base64');
                } catch (error) {
                  console.warn('Failed to download Linux signature:', error.message);
                }
              }
              platforms['linux-x86_64'] = {
                signature: signature,
                url: appImageAsset.browser_download_url
              };
              console.log(`Linux AppImage: ${appImageAsset.browser_download_url}`);
            }

            // latest.json 생성
            const latestJson = {
              version: version,
              notes: releaseData.body || '',
              pub_date: pubDate,
              platforms: platforms
            };

            fs.writeFileSync('latest.json', JSON.stringify(latestJson, null, 2));
            console.log('Generated latest.json:');
            console.log(JSON.stringify(latestJson, null, 2));

      - name: Upload latest.json to release
        run: |
          gh release upload ${{ github.ref_name }} latest.json --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    needs: [create-release, build-tauri, generate-updater-metadata]
    runs-on: ubuntu-latest

    steps:
      - name: Publish release
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Publishing release...');
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              draft: false
            });
            console.log('✅ Release published successfully!');
